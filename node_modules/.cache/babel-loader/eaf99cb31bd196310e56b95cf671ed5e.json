{"ast":null,"code":"//index.js in /Utils\nexport const validateEmail = email => {\n  return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\nexport const validatePassword = password => {\n  return password.length >= 6 ? true : false;\n};\nexport const capitalizeFirstLetter = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nexport const isCompanyBalanceValid = input => {\n  if (!parseFloat(input)) return false;\n  var pattern = /^\\d{1,8}(\\.\\d{1,2})?$/;\n  return pattern.test(input);\n};\nexport const isValidCompanySeats = input => {\n  var pattern = /^\\d(,\\d)*$/;\n  return pattern.test(input);\n};\nexport const isJSONObject = obj => {\n  if (typeof obj !== \"object\" || obj === null) {\n    return false;\n  }\n  try {\n    JSON.stringify(obj);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nexport const isJSONString = str => {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};","map":{"version":3,"names":["validateEmail","email","String","toLowerCase","match","validatePassword","password","length","capitalizeFirstLetter","str","charAt","toUpperCase","slice","isCompanyBalanceValid","input","parseFloat","pattern","test","isValidCompanySeats","isJSONObject","obj","JSON","stringify","e","isJSONString","parse"],"sources":["C:/Users/HP/Documents/GitHub/blitz/src/Utils/index.js"],"sourcesContent":["//index.js in /Utils\r\nexport const validateEmail = (email) => {\r\n  return String(email)\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport const validatePassword = (password) => {\r\n  return password.length >= 6 ? true : false;\r\n};\r\n\r\nexport const capitalizeFirstLetter = (str) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n\r\nexport const isCompanyBalanceValid = (input) => {\r\n  if (!parseFloat(input)) return false;\r\n\r\n  var pattern = /^\\d{1,8}(\\.\\d{1,2})?$/;\r\n  return pattern.test(input);\r\n};\r\n\r\nexport const isValidCompanySeats = (input) => {\r\n  var pattern = /^\\d(,\\d)*$/;\r\n  return pattern.test(input);\r\n};\r\n\r\nexport const isJSONObject = (obj) => {\r\n  if (typeof obj !== \"object\" || obj === null) {\r\n    return false;\r\n  }\r\n  try {\r\n    JSON.stringify(obj);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const isJSONString = (str) => {\r\n  if (typeof str !== \"string\") {\r\n    return false;\r\n  }\r\n  try {\r\n    JSON.parse(str);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAIC,KAAK,IAAK;EACtC,OAAOC,MAAM,CAACD,KAAK,CAAC,CACjBE,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,wJACF,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C,OAAOA,QAAQ,CAACC,MAAM,IAAI,CAAC,GAAG,IAAI,GAAG,KAAK;AAC5C,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAIC,GAAG,IAAK;EAC5C,OAAOA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;AACnD,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAIC,KAAK,IAAK;EAC9C,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC,EAAE,OAAO,KAAK;EAEpC,IAAIE,OAAO,GAAG,uBAAuB;EACrC,OAAOA,OAAO,CAACC,IAAI,CAACH,KAAK,CAAC;AAC5B,CAAC;AAED,OAAO,MAAMI,mBAAmB,GAAIJ,KAAK,IAAK;EAC5C,IAAIE,OAAO,GAAG,YAAY;EAC1B,OAAOA,OAAO,CAACC,IAAI,CAACH,KAAK,CAAC;AAC5B,CAAC;AAED,OAAO,MAAMK,YAAY,GAAIC,GAAG,IAAK;EACnC,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,EAAE;IAC3C,OAAO,KAAK;EACd;EACA,IAAI;IACFC,IAAI,CAACC,SAAS,CAACF,GAAG,CAAC;IACnB,OAAO,IAAI;EACb,CAAC,CAAC,OAAOG,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIf,GAAG,IAAK;EACnC,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAO,KAAK;EACd;EACA,IAAI;IACFY,IAAI,CAACI,KAAK,CAAChB,GAAG,CAAC;IACf,OAAO,IAAI;EACb,CAAC,CAAC,OAAOc,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}